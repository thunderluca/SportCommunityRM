// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using SportCommunityRM.Data;
using SportCommunityRM.Data.Models;
using System;

namespace SportCommunityRM.Data.Migrations
{
    [DbContext(typeof(SCRMContext))]
    [Migration("20171002102343_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SportCommunityRM.Data.Models.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<DateTime>("EndDate");

                    b.Property<Guid?>("FieldId");

                    b.Property<bool>("IsConfirmed");

                    b.Property<string>("Name");

                    b.Property<string>("Notes");

                    b.Property<DateTime>("StartDate");

                    b.Property<Guid?>("TeamId");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("TeamId");

                    b.ToTable("SCRM_Activities");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Activity");
                });

            modelBuilder.Entity("SportCommunityRM.Data.Models.Coach", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("RegisteredUserId");

                    b.HasKey("Id");

                    b.HasIndex("RegisteredUserId");

                    b.ToTable("SCRM_Coaches");
                });

            modelBuilder.Entity("SportCommunityRM.Data.Models.Content", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AuthorId");

                    b.Property<string>("Body");

                    b.Property<string>("Caption");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<bool>("IsPinned");

                    b.Property<DateTime?>("LastModifiedDate");

                    b.Property<string>("PictureId");

                    b.Property<string>("PictureUrl");

                    b.Property<DateTime>("PublicationDate");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("SCRM_Contents");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Content");
                });

            modelBuilder.Entity("SportCommunityRM.Data.Models.Field", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("LocationId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("SCRM_Fields");
                });

            modelBuilder.Entity("SportCommunityRM.Data.Models.Inscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal?>("AmountDue");

                    b.Property<DateTime>("EndDate");

                    b.Property<DateTime>("InsertionDate");

                    b.Property<decimal?>("PartialAmount");

                    b.Property<DateTime>("StartDate");

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SCRM_Inscriptions");
                });

            modelBuilder.Entity("SportCommunityRM.Data.Models.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<string>("City")
                        .IsRequired();

                    b.Property<string>("CivicNumber");

                    b.Property<string>("Country")
                        .IsRequired();

                    b.Property<string>("Name");

                    b.Property<string>("PostalCode")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("SCRM_Addresses");
                });

            modelBuilder.Entity("SportCommunityRM.Data.Models.MatchScore", b =>
                {
                    b.Property<Guid?>("RegisteredUserId");

                    b.Property<Guid>("MatchId");

                    b.Property<int>("Points");

                    b.HasKey("RegisteredUserId", "MatchId");

                    b.HasIndex("MatchId");

                    b.ToTable("SCRM_MatchScore");
                });

            modelBuilder.Entity("SportCommunityRM.Data.Models.Media", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ActivityId");

                    b.Property<string>("FileId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("SCRM_Media");
                });

            modelBuilder.Entity("SportCommunityRM.Data.Models.MedicalCertificate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("EndDate");

                    b.Property<DateTime>("InsertionDate");

                    b.Property<DateTime>("StartDate");

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SCRM_MedicalCertificates");
                });

            modelBuilder.Entity("SportCommunityRM.Data.Models.RegisteredUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("AspNetUserId")
                        .IsRequired();

                    b.Property<string>("BackgroundPictureId");

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("City");

                    b.Property<string>("CivicNumber");

                    b.Property<string>("Country");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("FiscalCode");

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("PictureId");

                    b.Property<string>("PostalCode");

                    b.Property<int>("Sex");

                    b.HasKey("Id");

                    b.ToTable("SCRM_RegisteredUsers");
                });

            modelBuilder.Entity("SportCommunityRM.Data.Models.RegisteredUserMediaTag", b =>
                {
                    b.Property<Guid>("RegisteredUserId");

                    b.Property<Guid>("MediaId");

                    b.HasKey("RegisteredUserId", "MediaId");

                    b.HasIndex("MediaId");

                    b.ToTable("SCRM_RegisteredUserMediaTag");
                });

            modelBuilder.Entity("SportCommunityRM.Data.Models.RegisteredUserTeam", b =>
                {
                    b.Property<Guid>("RegisteredUserId");

                    b.Property<Guid>("TeamId");

                    b.HasKey("RegisteredUserId", "TeamId");

                    b.HasIndex("TeamId");

                    b.ToTable("SCRM_RegisteredUserTeam");
                });

            modelBuilder.Entity("SportCommunityRM.Data.Models.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BackgroundPictureId");

                    b.Property<int?>("MaxBirthYear");

                    b.Property<int?>("MinBirthYear");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("PictureId");

                    b.HasKey("Id");

                    b.ToTable("SCRM_Teams");
                });

            modelBuilder.Entity("SportCommunityRM.Data.Models.TeamCoach", b =>
                {
                    b.Property<Guid>("TeamId");

                    b.Property<Guid>("CoachId");

                    b.HasKey("TeamId", "CoachId");

                    b.HasIndex("CoachId");

                    b.ToTable("SCRM_TeamCoach");
                });

            modelBuilder.Entity("SportCommunityRM.Data.Models.Match", b =>
                {
                    b.HasBaseType("SportCommunityRM.Data.Models.Activity");

                    b.Property<string>("EnemyTeamName");

                    b.Property<int>("EnemyTeamScore");

                    b.Property<int>("Score");

                    b.Property<Guid?>("TournamentId");

                    b.HasIndex("TournamentId");

                    b.ToTable("SCRM_Matches");

                    b.HasDiscriminator().HasValue("Match");
                });

            modelBuilder.Entity("SportCommunityRM.Data.Models.Tournament", b =>
                {
                    b.HasBaseType("SportCommunityRM.Data.Models.Activity");


                    b.ToTable("SCRM_Tournaments");

                    b.HasDiscriminator().HasValue("Tournament");
                });

            modelBuilder.Entity("SportCommunityRM.Data.Models.Training", b =>
                {
                    b.HasBaseType("SportCommunityRM.Data.Models.Activity");


                    b.ToTable("SCRM_Workouts");

                    b.HasDiscriminator().HasValue("Training");
                });

            modelBuilder.Entity("SportCommunityRM.Data.Models.Article", b =>
                {
                    b.HasBaseType("SportCommunityRM.Data.Models.Content");


                    b.ToTable("SCRM_Articles");

                    b.HasDiscriminator().HasValue("Article");
                });

            modelBuilder.Entity("SportCommunityRM.Data.Models.MatchReport", b =>
                {
                    b.HasBaseType("SportCommunityRM.Data.Models.Content");

                    b.Property<Guid?>("MatchId");

                    b.HasIndex("MatchId");

                    b.ToTable("SCRM_MatchesReports");

                    b.HasDiscriminator().HasValue("MatchReport");
                });

            modelBuilder.Entity("SportCommunityRM.Data.Models.Activity", b =>
                {
                    b.HasOne("SportCommunityRM.Data.Models.Field", "Field")
                        .WithMany("BookedActivities")
                        .HasForeignKey("FieldId");

                    b.HasOne("SportCommunityRM.Data.Models.Team", "Team")
                        .WithMany("Calendar")
                        .HasForeignKey("TeamId");
                });

            modelBuilder.Entity("SportCommunityRM.Data.Models.Coach", b =>
                {
                    b.HasOne("SportCommunityRM.Data.Models.RegisteredUser", "RegisteredUser")
                        .WithMany()
                        .HasForeignKey("RegisteredUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SportCommunityRM.Data.Models.Content", b =>
                {
                    b.HasOne("SportCommunityRM.Data.Models.RegisteredUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");
                });

            modelBuilder.Entity("SportCommunityRM.Data.Models.Field", b =>
                {
                    b.HasOne("SportCommunityRM.Data.Models.Location", "Location")
                        .WithMany("Fields")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SportCommunityRM.Data.Models.Inscription", b =>
                {
                    b.HasOne("SportCommunityRM.Data.Models.RegisteredUser", "User")
                        .WithMany("InscriptionsHistory")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("SportCommunityRM.Data.Models.MatchScore", b =>
                {
                    b.HasOne("SportCommunityRM.Data.Models.Match", "Match")
                        .WithMany("MatchScores")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SportCommunityRM.Data.Models.RegisteredUser", "RegisteredUser")
                        .WithMany("MatchScores")
                        .HasForeignKey("RegisteredUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SportCommunityRM.Data.Models.Media", b =>
                {
                    b.HasOne("SportCommunityRM.Data.Models.Activity", "Activity")
                        .WithMany("Medias")
                        .HasForeignKey("ActivityId");
                });

            modelBuilder.Entity("SportCommunityRM.Data.Models.MedicalCertificate", b =>
                {
                    b.HasOne("SportCommunityRM.Data.Models.RegisteredUser", "User")
                        .WithMany("MedicalCertificatesHistory")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("SportCommunityRM.Data.Models.RegisteredUserMediaTag", b =>
                {
                    b.HasOne("SportCommunityRM.Data.Models.Media", "Media")
                        .WithMany("TaggedUsers")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SportCommunityRM.Data.Models.RegisteredUser", "RegisteredUser")
                        .WithMany("TaggedMedia")
                        .HasForeignKey("RegisteredUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SportCommunityRM.Data.Models.RegisteredUserTeam", b =>
                {
                    b.HasOne("SportCommunityRM.Data.Models.RegisteredUser", "RegisteredUser")
                        .WithMany("Teams")
                        .HasForeignKey("RegisteredUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SportCommunityRM.Data.Models.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SportCommunityRM.Data.Models.TeamCoach", b =>
                {
                    b.HasOne("SportCommunityRM.Data.Models.Coach", "Coach")
                        .WithMany("Teams")
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SportCommunityRM.Data.Models.Team", "Team")
                        .WithMany("Coaches")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SportCommunityRM.Data.Models.Match", b =>
                {
                    b.HasOne("SportCommunityRM.Data.Models.Tournament")
                        .WithMany("Matches")
                        .HasForeignKey("TournamentId");
                });

            modelBuilder.Entity("SportCommunityRM.Data.Models.MatchReport", b =>
                {
                    b.HasOne("SportCommunityRM.Data.Models.Match", "Match")
                        .WithMany()
                        .HasForeignKey("MatchId");
                });
#pragma warning restore 612, 618
        }
    }
}
